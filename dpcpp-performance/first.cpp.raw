#include <iostream>
#include <CL/sycl.hpp>
#include <stdlib.h>
#include <assert.h>
#include <utility>
#include <tuple>

using namespace std;

static void handle_exception(const cl::sycl::exception &e) {
  std::cout << "SYCL exception caught: " << e.what() << std::endl;
}

static void handle_exceptions(const cl::sycl::exception_list &l) {
  std::cout << "SYCL exception handler called\n";

  for (cl::sycl::exception_ptr_class const& eptr : l) {
    try {
      std::rethrow_exception(eptr);
    }
    catch (cl::sycl::exception const& e) {
      std::cout << "Caught asynchronous SYCL exception: " << e.what() << std::endl;
    }
  }
}

void fill_data(float *arr, int num, float data) {
  for (int i = 0; i < num; i++) {
    arr[i] = data;
  }
}

void run_add_test(cl::sycl::queue &deviceQueue) {
    try {
      int num = 256 * 256 * 56 * 56;
      float *host_a = new float[num];
      float *host_b = new float[num];
      fill_data(host_a, num, 1.0f);
      fill_data(host_b, num, 2.0f);
      float alpha = 2.0;
      {
        cl::sycl::buffer<float, 1> buf_a(host_a, cl::sycl::range<1>(num));
        cl::sycl::buffer<float, 1> buf_b(host_b, cl::sycl::range<1>(num));

        deviceQueue.submit([&](cl::sycl::handler &cgh) {
          auto acc_a = buf_a.get_access<cl::sycl::access::mode::read_write>(cgh);
          auto acc_b = buf_b.get_access<cl::sycl::access::mode::read_write>(cgh);
          cgh.parallel_for<class kernel_add>(cl::sycl::range<1>(num), [=](cl::sycl::item<1> item_id) { 
            auto idx = item_id.get_id(0);
            acc_b[idx] = acc_a[idx] + alpha * acc_b[idx];
          });
        });
        deviceQueue.wait_and_throw();
      }
      std::cout << "host_b[0] = " << host_b[0] << std::endl; 
    }
    catch (cl::sycl::exception &e) {
      handle_exception(e);
    }
}

int main(int argc, char **argv) {
  cl::sycl::queue deviceQueue(handle_exceptions);
  run_add_test(deviceQueue);
  return 0;
}
